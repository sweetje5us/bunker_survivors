import type { GameConfig, Difficulty, EnemyType, WeaponType, ResourceType, SkillEffectsConfig } from './game-config.types';

export class ConfigManager {
  private static instance: ConfigManager;
  private config: GameConfig | null = null;
  private currentDifficulty: Difficulty = 'normal';

  private constructor() {}

  public static getInstance(): ConfigManager {
    if (!ConfigManager.instance) {
      ConfigManager.instance = new ConfigManager();
      console.log('[ConfigManager] üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ConfigManager');
    }
    return ConfigManager.instance;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
   */
  public async loadConfig(): Promise<void> {
    try {
      console.log('[ConfigManager] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON —Ñ–∞–π–ª–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
      const response = await fetch('/src/config/game-config.json');
      if (!response.ok) {
        throw new Error(`Failed to load config: ${response.statusText}`);
      }
      
      this.config = await response.json();
      console.log('[ConfigManager] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏');
      console.log('[ConfigManager] üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å game-config.json –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      console.log(`[ConfigManager] üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${Object.keys(this.config!).length}`);
      console.log(`[ConfigManager] üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${Object.keys(this.config!.difficulty).join(', ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (this.config!.initialResources?.easy?.moral !== undefined) {
        console.log(`[ConfigManager] üéØ –ú–æ—Ä–∞–ª—å –¥–ª—è easy —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${this.config!.initialResources.easy.moral}%`);
      }
      
    } catch (error) {
      console.error('[ConfigManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:', error);
      console.log('[ConfigManager] üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ fallback
      this.loadDefaultConfig();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ JSON
   * –í–ê–ñ–ù–û: –î–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ game-config.json —Ñ–∞–π–ª!
   */
  private loadDefaultConfig(): void {
    this.config = {
      difficulty: {
        easy: { name: '–õ–µ–≥–∫–∏–π', description: '–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤' },
        normal: { name: '–û–±—ã—á–Ω—ã–π', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å' },
        hard: { name: '–°–ª–æ–∂–Ω—ã–π', description: '–î–ª—è –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤' },
        nightmare: { name: '–ö–æ—à–º–∞—Ä', description: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å' }
      },
      experience: {
        baseLevelExperience: 100,
        enemyKillRewards: { '–ú–ê–†–û–î–ï–†': 1, '–ó–û–ú–ë–ò': 3, '–ú–£–¢–ê–ù–¢': 6, '–°–û–õ–î–ê–¢': 10 },
        dailyReward: 25,
        abilityPointsPerLevel: 3
      },
      resourceConsumption: {
        food: {
          easy: { intervalHours: 2, baseConsumption: 1, multiplier: 0.8 },
          normal: { intervalHours: 1, baseConsumption: 1, multiplier: 1.0 },
          hard: { intervalHours: 1, baseConsumption: 1, multiplier: 1.2 },
          nightmare: { intervalHours: 1, baseConsumption: 1, multiplier: 1.5 }
        },
        water: {
          easy: { intervalHours: 2, baseConsumption: 1, multiplier: 0.8 },
          normal: { intervalHours: 1, baseConsumption: 1, multiplier: 1.0 },
          hard: { intervalHours: 1, baseConsumption: 1, multiplier: 1.2 },
          nightmare: { intervalHours: 1, baseConsumption: 1, multiplier: 1.5 }
        }
      },
      initialResources: {
        easy: {
          happiness: 100, defense: 100, ammo: 200, comfort: 100, moral: 100,
          food: 150, water: 150, money: 500, wood: 100, metal: 100,
          coal: 100, nails: 100, paper: 100, glass: 100
        },
        normal: {
          happiness: 50, defense: 50, ammo: 100, comfort: 100, moral: 50,
          food: 100, water: 100, money: 200, wood: 50, metal: 25,
          coal: 10, nails: 20, paper: 15, glass: 5
        },
        hard: {
          happiness: 25, defense: 25, ammo: 50, comfort: 50, moral: 25,
          food: 50, water: 50, money: 100, wood: 25, metal: 12,
          coal: 5, nails: 10, paper: 8, glass: 3
        },
        nightmare: {
          happiness: 10, defense: 10, ammo: 25, comfort: 25, moral: 10,
          food: 25, water: 25, money: 50, wood: 12, metal: 6,
          coal: 2, nails: 5, paper: 4, glass: 1
        }
      },
      enemyDamage: {
        baseDamage: { '–ú–ê–†–û–î–ï–†': 1, '–ó–û–ú–ë–ò': 2, '–ú–£–¢–ê–ù–¢': 3, '–°–û–õ–î–ê–¢': 4 },
        defenseDamage: {
          easy: { multiplier: 0.5, intervalHours: 4 },
          normal: { multiplier: 1.0, intervalHours: 2 },
          hard: { multiplier: 1.5, intervalHours: 1 },
          nightmare: { multiplier: 2.0, intervalHours: 0.5 }
        },
        firstEnemyDelay: { easy: 8, normal: 6, hard: 4, nightmare: 2 },
        subsequentEnemyInterval: { easy: 4, normal: 3, hard: 2, nightmare: 1 }
      },
      enemyHealth: { '–ú–ê–†–û–î–ï–†': 2, '–ó–û–ú–ë–ò': 3, '–ú–£–¢–ê–ù–¢': 6, '–°–û–õ–î–ê–¢': 10 },
      weaponDamage: { melee: 1, pistol: 1, shotgun: 2, ar: 1, sniper: 3 },
      dayNightCycle: { dayDurationHours: 16, nightDurationHours: 8, dayStartHour: 6, nightStartHour: 22 },
      visitorSystem: { maxQueueSize: 10, initialVisitors: 3, arrivalInterval: { easy: '2-4', normal: '3-6', hard: '4-8', nightmare: '5-10' } },
      bunkerCapacity: { baseCapacity: 10, capacityPerRoom: { '–°–ø–∞–ª—å–Ω—è': 2, '–°—Ç–æ–ª–æ–≤–∞—è': 1, '–¢—É–∞–ª–µ—Ç': 1, '–ì–æ—Å–ø–∏—Ç–∞–ª—å': 1 } },
      skillEffects: {
        cooking: { foodBonus: 1, maxLevel: 2 },
        plumbing: { waterBonus: 1, maxLevel: 2 },
        hunting: { foodBonusPercent: 5, maxLevel: 10 },
        scouting: { lootBonusPercent: 5, maxLevel: 10 }
      },
      combatSystem: { soldierShotsPerHour: { base: 2, skillBonus: 1, maxShots: 8 }, attackCooldown: { base: 1000, skillReduction: 200 } },
             moraleSystem: { 
         baseDecay: 1, 
         maxMorale: 100,
         positiveEvents: { visitorAccepted: 5, enemyKilled: 2, roomBuilt: 3 }, 
         negativeEvents: { visitorRejected: -3, residentDied: -10, resourceShortage: -5 },
         levelUpBonus: {
           high: { min: 80, bonus: 2 },
           medium: { min: 60, bonus: 1 },
           low: { min: 0, bonus: 0 }
         },
         tradingQuality: {
           high: { min: 80, discount: 50 },
           medium: { min: 60, discount: 25 },
           normal: { min: 40, discount: 0 },
           low: { min: 20, markup: 25 },
           critical: { min: 0, markup: 50 }
         },
         comfortRecovery: {
           enabled: true,
           high: { min: 80, recoveryPerHour: 0.5 },
           medium: { min: 60, recoveryPerHour: 0.2 },
           low: { min: 0, recoveryPerHour: 0 }
         }
       },
      insanitySystem: { baseChance: 0.01, triggers: { lowMorale: 0.05, resourceShortage: 0.03, enemyAttack: 0.02 }, recoveryChance: 0.005 },
      defenseRegeneration: { baseRegenerationPerHour: 1, enabledWhenNoEnemies: true, maxDefense: 100 },
      comfortSystem: {
        defenseDependency: {
          enabled: true,
          baseComfort: 100,
          defenseThresholds: {
            high: { min: 80, bonus: 10 },
            medium: { min: 50, bonus: 0 },
            low: { min: 20, penalty: -20 },
            critical: { min: 0, penalty: -40 }
          }
        },
        happinessDependency: {
          enabled: true,
          comfortThresholds: {
            high: { min: 80, bonus: 5 },
            medium: { min: 50, bonus: 0 },
            low: { min: 20, penalty: -10 },
            critical: { min: 0, penalty: -20 }
          }
        }
      }
    };
          console.log('[ConfigManager] ‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (fallback)');
      console.log('[ConfigManager] üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ src/config/game-config.json');
      console.log(`[ConfigManager] üìä Fallback —Ä–∞–∑–¥–µ–ª–æ–≤: ${Object.keys(this.config!).length}`);
      console.log(`[ConfigManager] üìä Fallback —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${Object.keys(this.config!.difficulty).join(', ')}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
   */
  public setDifficulty(difficulty: Difficulty): void {
    this.currentDifficulty = difficulty;
    console.log(`[ConfigManager] ‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${difficulty}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
   */
  public getCurrentDifficulty(): Difficulty {
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${this.currentDifficulty}`);
    return this.currentDifficulty;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  public getConfig(): GameConfig {
    if (!this.config) {
      throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ loadConfig() —Å–Ω–∞—á–∞–ª–∞.');
    }
    
    const source = this.getConfigSource();
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source})`);
    return this.config;
  }

  // ===== –û–ü–´–¢ =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
   */
  public getBaseLevelExperience(): number {
    const config = this.getConfig();
    const experience = config.experience.baseLevelExperience;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è: ${experience}`);
    
    return experience;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—ã—Ç –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –≤—Ä–∞–≥–∞
   */
  public getEnemyKillReward(enemyType: EnemyType): number {
    const config = this.getConfig();
    const reward = config.experience.enemyKillRewards[enemyType] || 1;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –æ–ø—ã—Ç–∞ –∑–∞ –≤—Ä–∞–≥–∞ ${enemyType}: ${reward}`);
    
    return reward;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ–∂–∏—Ç—ã–π –¥–µ–Ω—å
   */
  public getDailyReward(): number {
    const config = this.getConfig();
    const reward = config.experience.dailyReward;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –æ–ø—ã—Ç–∞ –∑–∞ –¥–µ–Ω—å: ${reward}`);
    
    return reward;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∑–∞ —É—Ä–æ–≤–µ–Ω—å
   */
  public getAbilityPointsPerLevel(): number {
    const config = this.getConfig();
    const points = config.experience.abilityPointsPerLevel;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∑–∞ —É—Ä–æ–≤–µ–Ω—å: ${points}`);
    
    return points;
  }

  // ===== –†–ï–°–£–†–°–´ =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  public getInitialResources(): any {
    const config = this.getConfig();
    const resources = config.initialResources[this.currentDifficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${this.currentDifficulty}`);
    console.log(`[ConfigManager] üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${Object.keys(config.initialResources).join(', ')}`);
    console.log(`[ConfigManager] üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:`, resources);
    
    return resources;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
   */
  public getResourceConsumption(resourceType: 'food' | 'water'): any {
    const config = this.getConfig();
    const consumption = config.resourceConsumption[resourceType][this.currentDifficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è ${resourceType} –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${this.currentDifficulty}`);
    console.log(`[ConfigManager] üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`, consumption);
    
    return consumption;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –≤ —á–∞—Å–∞—Ö
   */
  public getResourceConsumptionInterval(resourceType: 'food' | 'water'): number {
    const interval = this.getResourceConsumption(resourceType).intervalHours;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è ${resourceType}: ${interval}—á`);
    
    return interval;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
   */
  public getResourceConsumptionMultiplier(resourceType: 'food' | 'water'): number {
    const multiplier = this.getResourceConsumption(resourceType).multiplier;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –º–Ω–æ–∂–∏—Ç–µ–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è ${resourceType}: ${multiplier}`);
    
    return multiplier;
  }

  // ===== –í–†–ê–ì–ò =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞
   */
  public getEnemyHealth(enemyType: EnemyType): number {
    const config = this.getConfig();
    const health = config.enemyHealth[enemyType] || 2;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∑–¥–æ—Ä–æ–≤—å—è –≤—Ä–∞–≥–∞ ${enemyType}: ${health}`);
    
    return health;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –≤—Ä–∞–≥–∞
   */
  public getEnemyBaseDamage(enemyType: EnemyType): number {
    const config = this.getConfig();
    const damage = config.enemyDamage.baseDamage[enemyType] || 1;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞ ${enemyType}: ${damage}`);
    
    return damage;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–Ω–∞ –ø–æ –∑–∞—â–∏—Ç–µ
   */
  public getDefenseDamageConfig(): any {
    const config = this.getConfig();
    const damageConfig = config.enemyDamage.defenseDamage[this.currentDifficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Ä–æ–Ω–∞ –ø–æ –∑–∞—â–∏—Ç–µ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${this.currentDifficulty}:`, damageConfig);
    
    return damageConfig;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –ø–æ –∑–∞—â–∏—Ç–µ
   */
  public getDefenseDamageMultiplier(): number {
    const multiplier = this.getDefenseDamageConfig().multiplier;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –º–Ω–æ–∂–∏—Ç–µ–ª—è —É—Ä–æ–Ω–∞ –ø–æ –∑–∞—â–∏—Ç–µ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${this.currentDifficulty}: ${multiplier}`);
    
    return multiplier;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Ä–æ–Ω–∞ –ø–æ –∑–∞—â–∏—Ç–µ –≤ —á–∞—Å–∞—Ö
   */
  public getDefenseDamageInterval(): number {
    const interval = this.getDefenseDamageConfig().intervalHours;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É—Ä–æ–Ω–∞ –ø–æ –∑–∞—â–∏—Ç–µ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${this.currentDifficulty}: ${interval}—á`);
    
    return interval;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞ –≤ —á–∞—Å–∞—Ö
   */
  public getFirstEnemyDelay(): number {
    const config = this.getConfig();
    const delay = config.enemyDamage.firstEnemyDelay[this.currentDifficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${this.currentDifficulty}: ${delay}—á`);
    
    return delay;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—Ä–∞–≥–∞–º–∏ –≤ —á–∞—Å–∞—Ö
   */
  public getSubsequentEnemyInterval(): number {
    const config = this.getConfig();
    const interval = config.enemyDamage.subsequentEnemyInterval[this.currentDifficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –≤—Ä–∞–≥–∞–º–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${this.currentDifficulty}: ${interval}—á`);
    
    return interval;
  }

  // ===== –û–†–£–ñ–ò–ï =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è
   */
  public getWeaponDamage(weaponType: WeaponType): number {
    const config = this.getConfig();
    const damage = config.weaponDamage[weaponType] || 1;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è ${weaponType}: ${damage}`);
    
    return damage;
  }

  // ===== –¶–ò–ö–õ –î–ï–ù–¨/–ù–û–ß–¨ =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è –≤ —á–∞—Å–∞—Ö
   */
  public getDayDurationHours(): number {
    const config = this.getConfig();
    const duration = config.dayNightCycle.dayDurationHours;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–Ω—è: ${duration}—á`);
    
    return duration;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏–Ω–æ–º–µ—Ä –Ω–æ—á–∏ –≤ —á–∞—Å–∞—Ö
   */
  public getNightDurationHours(): number {
    const config = this.getConfig();
    const duration = config.dayNightCycle.nightDurationHours;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—á–∏: ${duration}—á`);
    
    return duration;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è
   */
  public getDayStartHour(): number {
    const config = this.getConfig();
    const hour = config.dayNightCycle.dayStartHour;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞ –¥–Ω—è: ${hour}—á`);
    
    return hour;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å –Ω–∞—á–∞–ª–∞ –Ω–æ—á–∏
   */
  public getNightStartHour(): number {
    const config = this.getConfig();
    const hour = config.dayNightCycle.nightStartHour;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ—á–∏: ${hour}—á`);
    
    return hour;
  }

  // ===== –ü–û–°–ï–¢–ò–¢–ï–õ–ò =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
   */
  public getMaxQueueSize(): number {
    const config = this.getConfig();
    const size = config.visitorSystem.maxQueueSize;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: ${size}`);
    
    return size;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
   */
  public getInitialVisitors(): number {
    const config = this.getConfig();
    const visitors = config.visitorSystem.initialVisitors;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${visitors}`);
    
    return visitors;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
   */
  public getVisitorArrivalInterval(): string {
    const config = this.getConfig();
    const interval = config.visitorSystem.arrivalInterval[this.currentDifficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏–±—ã—Ç–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${this.currentDifficulty}: ${interval}`);
    
    return interval;
  }

  // ===== –í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –ë–£–ù–ö–ï–†–ê =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—É–Ω–∫–µ—Ä–∞
   */
  public getBaseBunkerCapacity(): number {
    const config = this.getConfig();
    const capacity = config.bunkerCapacity.baseCapacity;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—É–Ω–∫–µ—Ä–∞: ${capacity}`);
    
    return capacity;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã
   */
  public getRoomCapacity(roomName: string): number {
    const config = this.getConfig();
    const capacity = config.bunkerCapacity.capacityPerRoom[roomName] || 0;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã ${roomName}: ${capacity}`);
    
    return capacity;
  }

  // ===== –ù–ê–í–´–ö–ò =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤—ã–∫–∞
   */
  public getSkillEffect(skillName: string, effectName: string): number {
    const config = this.getConfig();
    const skill = config.skillEffects[skillName as keyof SkillEffectsConfig];
    const effect = skill ? skill[effectName] || 0 : 0;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–≤—ã–∫–∞ ${skillName}.${effectName}: ${effect}`);
    
    return effect;
  }

  // ===== –ë–û–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ —Å–æ–ª–¥–∞—Ç–∞ –≤ —á–∞—Å
   */
  public getSoldierBaseShotsPerHour(): number {
    const config = this.getConfig();
    const shots = config.combatSystem.soldierShotsPerHour.base;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤—ã—Ö –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ —Å–æ–ª–¥–∞—Ç–∞ –≤ —á–∞—Å: ${shots}`);
    
    return shots;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –∫ –≤—ã—Å—Ç—Ä–µ–ª–∞–º –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
   */
  public getSoldierSkillBonus(): number {
    const config = this.getConfig();
    const bonus = config.combatSystem.soldierShotsPerHour.skillBonus;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–æ–Ω—É—Å–∞ –∫ –≤—ã—Å—Ç—Ä–µ–ª–∞–º –æ—Ç –Ω–∞–≤—ã–∫–æ–≤: ${bonus}`);
    
    return bonus;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
   */
  public getSoldierMaxShots(): number {
    const config = this.getConfig();
    const maxShots = config.combatSystem.soldierShotsPerHour.maxShots;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤: ${maxShots}`);
    
    return maxShots;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –∞—Ç–∞–∫–∏
   */
  public getAttackCooldownBase(): number {
    const config = this.getConfig();
    const cooldown = config.combatSystem.attackCooldown.base;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –∞—Ç–∞–∫–∏: ${cooldown}–º—Å`);
    
    return cooldown;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
   */
  public getAttackCooldownSkillReduction(): number {
    const config = this.getConfig();
    const reduction = config.combatSystem.attackCooldown.skillReduction;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤: ${reduction}–º—Å`);
    
    return reduction;
  }

  // ===== –°–ò–°–¢–ï–ú–ê –ú–û–†–ê–õ–ò =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ—Ä–∞–ª–∏
   */
  public getMaxMorale(): number {
    const config = this.getConfig();
    const maxMorale = config.moraleSystem.maxMorale;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–æ—Ä–∞–ª–∏: ${maxMorale}%`);
    
    return maxMorale;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –º–æ—Ä–∞–ª–∏
   */
  public getMoraleBaseDecay(): number {
    const config = this.getConfig();
    const decay = config.moraleSystem.baseDecay;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –º–æ—Ä–∞–ª–∏: ${decay}`);
    
    return decay;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ—Ä–∞–ª–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   */
  public getMoraleEventChange(eventType: 'positive' | 'negative', eventName: string): number {
    const config = this.getConfig();
    const events = config.moraleSystem[`${eventType}Events`];
    const change = events[eventName] || 0;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ—Ä–∞–ª–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è ${eventType}.${eventName}: ${change}`);
    
    return change;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –∫ –æ—á–∫–∞–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∑–∞ —É—Ä–æ–≤–µ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ—Ä–∞–ª–∏
   */
  public getMoraleLevelUpBonus(morale: number): number {
    const config = this.getConfig();
    const thresholds = config.moraleSystem.levelUpBonus;
    
    let bonus = 0;
    if (morale >= thresholds.high.min) {
      bonus = thresholds.high.bonus;
    } else if (morale >= thresholds.medium.min) {
      bonus = thresholds.medium.bonus;
    } else {
      bonus = thresholds.low.bonus;
    }
    
    console.log(`[ConfigManager] üìä –ë–æ–Ω—É—Å –∫ –æ—á–∫–∞–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –º–æ—Ä–∞–ª–∏ ${morale}%: +${bonus}`);
    
    return bonus;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ—Ä–∞–ª–∏
   */
  public getMoraleTradingQuality(morale: number): { type: 'discount' | 'markup'; value: number } {
    const config = this.getConfig();
    const thresholds = config.moraleSystem.tradingQuality;
    
    let result: { type: 'discount' | 'markup'; value: number };
    
    if (morale >= thresholds.high.min) {
      result = { type: 'discount', value: thresholds.high.discount };
    } else if (morale >= thresholds.medium.min) {
      result = { type: 'discount', value: thresholds.medium.discount };
    } else if (morale >= thresholds.normal.min) {
      result = { type: 'discount', value: thresholds.normal.discount };
    } else if (morale >= thresholds.low.min) {
      result = { type: 'markup', value: thresholds.low.markup };
    } else {
      result = { type: 'markup', value: thresholds.critical.markup };
    }
    
    console.log(`[ConfigManager] üìä –ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –º–æ—Ä–∞–ª–∏ ${morale}%: ${result.type} ${result.value}%`);
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ—Ä–∞–ª–∏ –æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞
   */
  public getMoraleComfortRecovery(comfort: number): number {
    const config = this.getConfig();
    
    if (!config.moraleSystem.comfortRecovery.enabled) {
      return 0;
    }
    
    const thresholds = config.moraleSystem.comfortRecovery;
    
    let recovery = 0;
    if (comfort >= thresholds.high.min) {
      recovery = thresholds.high.recoveryPerHour;
    } else if (comfort >= thresholds.medium.min) {
      recovery = thresholds.medium.recoveryPerHour;
    } else {
      recovery = thresholds.low.recoveryPerHour;
    }
    
    console.log(`[ConfigManager] üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ—Ä–∞–ª–∏ –æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞ ${comfort}%: +${recovery}/—á–∞—Å`);
    
    return recovery;
  }

  // ===== –°–ò–°–¢–ï–ú–ê –ë–ï–ó–£–ú–ò–Ø =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –±–µ–∑—É–º–∏—è
   */
  public getInsanityBaseChance(): number {
    const config = this.getConfig();
    const chance = config.insanitySystem.baseChance;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞ –±–µ–∑—É–º–∏—è: ${chance}`);
    
    return chance;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —à–∞–Ω—Å –±–µ–∑—É–º–∏—è –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
   */
  public getInsanityTriggerChance(triggerName: string): number {
    const config = this.getConfig();
    const chance = config.insanitySystem.triggers[triggerName] || 0;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —à–∞–Ω—Å–∞ –±–µ–∑—É–º–∏—è –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ ${triggerName}: ${chance}`);
    
    return chance;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–µ–∑—É–º–∏—è
   */
  public getInsanityRecoveryChance(): number {
    const config = this.getConfig();
    const chance = config.insanitySystem.recoveryChance;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —à–∞–Ω—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–µ–∑—É–º–∏—è: ${chance}`);
    
    return chance;
  }

  // ===== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–©–ò–¢–´ =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞—â–∏—Ç—ã –≤ —á–∞—Å
   */
  public getDefenseRegenerationPerHour(): number {
    const config = this.getConfig();
    const regeneration = config.defenseRegeneration.baseRegenerationPerHour;
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${regeneration}%`);
    
    return regeneration;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—Ä–∞–≥–æ–≤
   */
  public isDefenseRegenerationEnabled(): boolean {
    const config = this.getConfig();
    const enabled = config.defenseRegeneration.enabledWhenNoEnemies;
    
    console.log(`[ConfigManager] üìä –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—Ä–∞–≥–æ–≤: ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    
    return enabled;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
   */
  public getMaxDefense(): number {
    const config = this.getConfig();
    const maxDefense = config.defenseRegeneration.maxDefense;
    
    console.log(`[ConfigManager] üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: ${maxDefense}%`);
    
    return maxDefense;
  }

  // ===== –°–ò–°–¢–ï–ú–ê –ö–û–ú–§–û–†–¢–ê =====
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
   */
  public getBaseComfort(): number {
    const config = this.getConfig();
    const baseComfort = config.comfortSystem.defenseDependency.baseComfort;
    
    console.log(`[ConfigManager] üìä –ë–∞–∑–æ–≤—ã–π –∫–æ–º—Ñ–æ—Ä—Ç: ${baseComfort}%`);
    
    return baseComfort;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –æ—Ç –∑–∞—â–∏—Ç—ã
   */
  public isComfortDefenseDependencyEnabled(): boolean {
    const config = this.getConfig();
    const enabled = config.comfortSystem.defenseDependency.enabled;
    
    console.log(`[ConfigManager] üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –æ—Ç –∑–∞—â–∏—Ç—ã: ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    
    return enabled;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –æ—Ç –∑–∞—â–∏—Ç—ã
   */
  public getComfortDefenseThresholds(): any {
    const config = this.getConfig();
    const thresholds = config.comfortSystem.defenseDependency.defenseThresholds;
    
    console.log(`[ConfigManager] üìä –ü–æ—Ä–æ–≥–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –æ—Ç –∑–∞—â–∏—Ç—ã:`, thresholds);
    
    return thresholds;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—á–∞—Å—Ç—å—è –æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞
   */
  public isHappinessComfortDependencyEnabled(): boolean {
    const config = this.getConfig();
    const enabled = config.comfortSystem.happinessDependency.enabled;
    
    console.log(`[ConfigManager] üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—á–∞—Å—Ç—å—è –æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞: ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    
    return enabled;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—á–∞—Å—Ç—å—è –æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞
   */
  public getHappinessComfortThresholds(): any {
    const config = this.getConfig();
    const thresholds = config.comfortSystem.happinessDependency.comfortThresholds;
    
    console.log(`[ConfigManager] üìä –ü–æ—Ä–æ–≥–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—á–∞—Å—Ç—å—è –æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞:`, thresholds);
    
    return thresholds;
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   */
  public isConfigLoaded(): boolean {
    const loaded = this.config !== null;
    console.log(`[ConfigManager] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${loaded ? '–î–∞' : '–ù–µ—Ç'}`);
    return loaded;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞
   */
  public isConfigFromJSON(): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å "nightmare", —Ç–æ —ç—Ç–æ JSON
    // –í –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –≤—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const fromJSON = this.config !== null && this.config.difficulty.nightmare !== undefined;
    console.log(`[ConfigManager] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${fromJSON ? 'JSON —Ñ–∞–π–ª' : '–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'}`);
    return fromJSON;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  public getConfigSource(): string {
    if (!this.isConfigLoaded()) {
      return '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞';
    }
    const source = this.isConfigFromJSON() ? 'JSON —Ñ–∞–π–ª' : '–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (fallback)';
    console.log(`[ConfigManager] üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${source}`);
    return source;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  public getDifficultyInfo(difficulty: Difficulty): any {
    const config = this.getConfig();
    const info = config.difficulty[difficulty];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${difficulty}:`, info);
    
    return info;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  public getAvailableDifficulties(): Difficulty[] {
    const config = this.getConfig();
    const difficulties = Object.keys(config.difficulty) as Difficulty[];
    
    console.log(`[ConfigManager] üìä –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: ${difficulties.join(', ')}`);
    
    return difficulties;
  }
}
